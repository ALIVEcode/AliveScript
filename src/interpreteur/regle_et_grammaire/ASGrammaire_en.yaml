Ajouter:
  commandes:
    LIRE: '\bread\b'
    UTILISER: '\buse\b'
    VAR: '\bvar\b'
    CONSTANTE: '\bconst\b'

  methode_moteur:
    AVANCER: '\bforward\b'
    RECULER: '\bbackward\b'
    ARRETER: '\bstop\b'
    TOURNER_DROITE: '\bright\b'
    TOURNER_GAUCHE: '\bleft\b'

  arithmetique:
    PLUS: '\+'
    POW: '\^'
    MUL: '\*'
    MOINS: "-"
    DIV: '\/'
    DIV_ENTIERE: '\/\/'
    MOD: "%"
    PIPE: "[|]"

  assignements:
    ASSIGNEMENT: "="
    ASSIGNEMENT_FLECHE: "<-"
    PLUS_ASSIGNEMENT: '\+='
    POW_ASSIGNEMENT: '\^='
    MUL_ASSIGNEMENT: '\*='
    MOINS_ASSIGNEMENT: "-="
    DIV_ASSIGNEMENT: '\/='
    DIV_ENTIERE_ASSIGNEMENT: '\/\/='
    MOD_ASSIGNEMENT: "[%]="
    PIPE_ASSIGNEMENT: '\|='

  # fonction
  fonctions:
    FONCTION: '\bfunction\b'
    STRUCTURE: '\bstructure\b'
    GET: '\bget\b'
    SET: '\bset\b'
    FLECHE: "->"

  # structure

  blocs:
    SI: '\bif\b'
    SINON: '\belse\b'
    ALORS: '\bthen\b'

    # bloc pour
    POUR: '\bfor\b'
    REPETER: '\brepeat\b'
    TROIS_POINTS: '\.\.\.'
    BOND: '\bjump\b'
    DANS: '\bin\b'

    # bloc tant que
    TANT_QUE: '\bwhile\b'
    FAIRE: '\bdo\b'

  control_flow:
    SORTIR: '\bexit\b'
    CONTINUER: '\bcontinue\b'
    RETOURNER: '\breturn\b'

  # fin
  FIN: '\bend\b'

  type_de_donnees:
    ENTIER: '\d+'
    DECIMAL: '\d+\.\d+|\d+\.(?!\.)|(?<!\.)\.\d+'
    TEXTE: '".*?"|''.*?'''
    BOOLEEN: '\btrue\b|\bfalse\b'
    NUL: '\bnul\b'

  nom_type_de_donnees:
    NOM_ENTIER: '\binteger\b'
    NOM_DECIMAL: '\bdecimal\b'
    NOM_TEXTE: '\btext\b'
    NOM_BOOLEEN: '\bboolean\b'
    NOM_LISTE: '\blist\b'
    NOM_FONCTION: '\bfunctionType\b'
    NOM_NUL: '\bnullType\b'
    NOM_NOMBRE: '\bnumber\b'
    NOM_ITERABLE: '\biterable\b'
    NOM_TOUT: '\ball\b'
    NOM_RIEN: '\bnone\b'
    NOM_DICT: '\bdict\b'
    NOM_PAIRE: '\bpair\b'

  comparaison:
    EGAL: "(={2})|(==)"
    PAS_EGAL: "!="
    PLUS_GRAND: ">"
    PLUS_PETIT: "<"
    PLUS_GRAND_EGAL: ">="
    PLUS_PETIT_EGAL: "<="

  porte_logique:
    ET: '\band\b'
    OU: '\bor\b'

  PAS: '\bnot\b'

  # separateur
  PARENT_OUV: "[(]"
  PARENT_FERM: "[)]"

  # iterateur
  CROCHET_OUV: '\['
  CROCHET_FERM: '\]'

  # liste
  BRACES_OUV: "[{]"
  BRACES_FERM: "[}]"

  # sous-categorie
  # le point indique aussi un nombre decimal
  POINT: '\.'
  VIRGULE: "[,]"
  DEUX_POINTS: "[:]"
  POINT_VIRGULE: "[;]"

  NOM_VARIABLE: '((\p{L}|_)+(\d+)*(\p{L})*_*\.?)+'

Ignorer:
  - '\s+'
  - "#.*"
  - '\(:.*:\)'
  - '\(-:.*:-\)'
